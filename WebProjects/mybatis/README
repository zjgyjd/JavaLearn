po : persistent object 持久对象
vo :
POJO ：plain ordinary java object 无规则简单java对象
1 ．POJO持久化之后==〉PO

（在运行期，由Hibernate中的cglib动态把POJO转换为PO，PO相对于POJO会增加一些用来管理数据库entity状态的属性和方法。PO对于programmer来说完全透明，由于是运行期生成PO，所以可以支持增量编译，增量调试。）

2 ．POJO传输过程中==〉DTO

3 ．POJO用作表示层==〉VO
PO 和VO都应该属于它。

BO：business object 业务对象
业务对象主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。
比如一个简历，有教育经历、工作经历、社会关系等等。我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。

VO：value object 值对象 / view object 表现层对象
1 ．主要对应页面显示（web页面/swt、swing界面）的数据对象。
2 ．可以和表对应，也可以不，这根据业务的需要。

DAO：data access object数据访问对象
1 ．主要用来封装对DB的访问（CRUD操作）。
2 ．通过接收Business层的数据，把POJO持久化为PO。
[见resources的VO+PO.jpg]

======================================================================================================
大数据,云计算,移动互联网,IOT(物联网),AI


java的七大特性
======================================================================================================
mybatis 用来访问数据库  因为jdbc和面向对象不匹配

                        sqlSessionFactory--------->sqlMapConfig.xml(数据库相关信息)一次只创建一个
                                |
                            sqlSession(相当于Connection)连接数据库,执行sql语句
                                |
                            execute(执行器)
                                |
                           StatementID(真正执行sql语句)
                                |
                                |
                                DB
配置sqlMapConfig.xml
plugin中的搜索mybatis tools


注意要将该文件加入到sqlMapConfig.xml中
关于User的xml User.xml
namespace(用于区分statement空间)
每个语句是一个statement,用#{value}来不将语句写死,可以从上层传输过来
strFile - "sqlMapConfig.xml";
需要一个inputStream = Resources.getResourcesAsString(strFile);
用这个流就可以new SqlSessionFactoryBuilder.build(inputStream);
时候获取sqlSession

利用规则让mybatis进行动态代理
1.map.xml中的namespace必须是接口所在包的全限定名
2.接口的命名以Mapper结束
3.接口中方法的名称是mapper.xml文件中statement的Id的名称
4.接口中方法的返回值是mapper.xml文件中statement的resultType
5.接口中方法的参数时mapper.xml文件中statement的parameterType